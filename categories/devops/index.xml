<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on My New Hugo Site</title>
    <link>http://axcoto.com/categories/devops/index.xml</link>
    <description>Recent content in Devops on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://axcoto.com/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10x faster method to remove dup lines</title>
      <link>http://axcoto.com/notes/fastest-method-to-remove-dup-lines/</link>
      <pubDate>Thu, 27 Apr 2017 12:19:23 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/fastest-method-to-remove-dup-lines/</guid>
      <description>&lt;p&gt;Whenever talking about removing duplicate line, I always use a
combination of &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;uniq&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wc -l source.csv
10941092 source.csv

time sort -u source.csv | uniq &amp;gt; source_standarize.csv
real0m50126s
user0m40.104s
sys0m0.944s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, today I learn a new trick which is 10x faster using awk:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time awk &#39;!a[$0]++&#39; source.csv

real0m9.400s
user0m5.336s
sys0m0.240s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So 10x faster. Let&amp;rsquo;s see how this trick works&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;1&#39; file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 evaluates to true, and will return everything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;0&#39; file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will return nothing.&lt;/p&gt;

&lt;p&gt;awk goes over line by line, evaluate and the result, if it&amp;rsquo;s true, it
print out. so look at &lt;code&gt;!a[$0]++&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is just an varaible that we declate and use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[$0]&lt;/code&gt;: $0 is whole line, so we create an hash, with the line text as
key&lt;/li&gt;
&lt;li&gt;a[$0]++ will incrase the value to 1&lt;/li&gt;
&lt;li&gt;First time a line appear, &lt;code&gt;a[$0]&lt;/code&gt; return 0. Hence &lt;code&gt;!0&lt;/code&gt;-&amp;gt; true.&lt;/li&gt;
&lt;li&gt;Second time a line appear, &lt;code&gt;a[$0]&lt;/code&gt; is already 2, and will increaseing.
&lt;code&gt;!2&lt;/code&gt; -&amp;gt; false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence &lt;code&gt;awk&lt;/code&gt; will not print out that.
So basically this is an giant hash map&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>awk tip</title>
      <link>http://axcoto.com/notes/awk-tip/</link>
      <pubDate>Sun, 23 Apr 2017 12:23:34 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/awk-tip/</guid>
      <description>&lt;p&gt;AWK is a powerful tool to process text data. In it, we can do control
structure, repeat&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Format date with linux</title>
      <link>http://axcoto.com/notes/format-date-with-linux/</link>
      <pubDate>Sun, 23 Apr 2017 01:23:48 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/format-date-with-linux/</guid>
      <description>&lt;p&gt;Time is part of DevOps life. We use timestampt everywhere, in backup, in
cronjob, compare different between two times. However, working with
date/time in bash maybe a bit cumbersome.&lt;/p&gt;

&lt;p&gt;On Bash, lots of time, we have to rely on an external utility and use
the output to feed into another variable. That&amp;rsquo;s Linux way.&lt;/p&gt;

&lt;p&gt;The command we are looking at is &lt;code&gt;date&lt;/code&gt;. It&amp;rsquo;s extremely powerful.&lt;/p&gt;

&lt;p&gt;The most basic use is just call it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date
Sun Apr 23 08:27:40 UTC 2017
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is useless most of time. We can format it by passing the format
string as firt argument.&lt;/p&gt;

&lt;p&gt;Format is to epoch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date +%s
1492936099
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Format it as we always do with our language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date +%Y-%m-%d
2017-04-23
$ date +%D
04/23/17
$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot;
2017-04-04/23/17 08:30:08
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happen if we want to get yesterday time, tomorrow, 5 hours ago, as
we always do in Rails&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5.minutes.ago
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or when we want to format a specificed date, not current day time. We
can pass an &lt;code&gt;--date&lt;/code&gt; parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=now
2017-04-04/23/17 08:31:51
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s do time travel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=tomorrow
2017-04-04/24/17 08:32:02

$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=yesterday
2017-04-04/22/17 08:32:06
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back to our Rails code, we love &lt;code&gt;ago&lt;/code&gt;, &lt;code&gt;from now&lt;/code&gt; etc. We can do that
with date as well. By default, it advance time into future, unless we
specifiy &lt;code&gt;ago&lt;/code&gt;. Such as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=&#39;5 minutes ago&#39;
2017-04-04/23/17 08:29:48
$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=&#39;1 hours ago&#39;
2017-04-04/23/17 07:35:14
$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=&#39;1 hours&#39;
2017-04-04/23/17 09:35:25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s suprisingly very powerful and can parse almost anything&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=&#39;next monday&#39;
2017-04-04/24/17 00:00:00
$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=&#39;next monday 5:00&#39;
2017-04-04/24/17 05:00:00
$ date &amp;quot;+%Y-%m-%D %H:%M:%S&amp;quot; --date=&#39;next monday 5:00pm&#39;
2017-04-04/24/17 17:00:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, don&amp;rsquo;t forgot to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to learn more about what it can do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mongodb change replica set hostname</title>
      <link>http://axcoto.com/notes/mongodb-change-replica-set-hostname/</link>
      <pubDate>Wed, 05 Apr 2017 11:36:43 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/mongodb-change-replica-set-hostname/</guid>
      <description>&lt;p&gt;MongoDB by default take the hostname when creating replica set. In a
replica set, the node communicate by that hostname. If the hostname
wasn&amp;rsquo;t resolveable then they will not be able to talk to each other.
A way to solve them is using ip address or some public/private DNS
as hostname.&lt;/p&gt;

&lt;p&gt;Changing hostname is easy, by following these steps.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cfg = rs.conf();
cfg.members[0].host = &amp;quot;newhostname.tld:27017&amp;quot;;
rs.reconfig(cfg);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using btrfs with docker</title>
      <link>http://axcoto.com/notes/docker-btrfs/</link>
      <pubDate>Fri, 16 Dec 2016 19:54:58 -0800</pubDate>
      
      <guid>http://axcoto.com/notes/docker-btrfs/</guid>
      <description>&lt;p&gt;I recently have some issue with docker and btrfs which makes me want to
learn more about it. The reason I have used &lt;code&gt;btrfs&lt;/code&gt; is to solve some
issues with device mapper.&lt;/p&gt;

&lt;p&gt;I use docker with &lt;code&gt;btrfs&lt;/code&gt;. Recently, for some reasons the
&lt;code&gt;/var/lib/docker&lt;/code&gt; grow to 100% disk space and docker unable to start
with some error about opening db file or so.&lt;/p&gt;

&lt;p&gt;I tried to take a snapshot of EBS volume and resize it with &lt;code&gt;resize2fs&lt;/code&gt;
as I always do when resizing volume on EBS. But turning out that doesn&amp;rsquo;t
work due to &lt;code&gt;btrfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily I found an much nicer way to increase. Simply add a new volume,
then using this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo btrfs device add -f /dev/xvdc /var/lib/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds extra space to &lt;code&gt;/var/lib/docker&lt;/code&gt;. At least, this will make
docker start backup and I can backup my docker image or inspect/debug
some existing container.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Append hash to asset in hugo</title>
      <link>http://axcoto.com/notes/append-hash-to-asset-in-hugo/</link>
      <pubDate>Thu, 07 Jul 2016 17:51:36 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/append-hash-to-asset-in-hugo/</guid>
      <description>&lt;p&gt;Hugo doesn&amp;rsquo;t has a built-in process to append a revision/hash to asset
file name when compile from the theme. As the result, the URL remains
same and is cached in browser unless we explicitly trigger force refresh. If we
could append the hash, we can let browser caches it forever hence
improve site performance.&lt;/p&gt;

&lt;p&gt;This is what I setup to achieve this for &lt;a href=&#34;axcoto.com&#34;&gt;axcoto.com&lt;/a&gt; with a simple
bash script. It isn&amp;rsquo;t scale way but it&amp;rsquo;s a good start when we just
need to whip up something.&lt;/p&gt;

&lt;p&gt;Our goal: instead of &lt;code&gt;css/main.css&lt;/code&gt; we now have &lt;code&gt;css/main-md5-hash-here.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I put this in my &lt;code&gt;makefile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CSS_DIR = public/css
CSS_FILE = $(CSS_DIR)/main.css
CSS_REV = main-$(shell md5 -r $(WORKDIR)/$(CSS_FILE) | awk &#39;{print $$1}&#39;).css

asset:
  cp $(CSS_FILE) &amp;quot;$(CSS_DIR)/main-$(shell md5 -r $(CSS_FILE) | awk &#39;{print $$1}&#39;).css&amp;quot;
  find public -name &amp;quot;*.html&amp;quot; -print0 | xargs -0 -I filename /bin/bashh -c &amp;quot;echo filename; sed &#39;s/css\/main.css/css\/$(CSS_REV)/g&#39; filename &amp;gt; tmp; mv tmp filename&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We simply copy the css file and append the &lt;code&gt;md5&lt;/code&gt; hash. We have to
redirect output of &lt;code&gt;sed&lt;/code&gt; since I don&amp;rsquo;t know a way to replace inline with
sed on Mac.&lt;/p&gt;

&lt;p&gt;Now, after generate content, we simply run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make asset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It find all &lt;strong&gt;.html&lt;/strong&gt; file and replace path of &lt;code&gt;css/main.css&lt;/code&gt; with the
hash appended.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>understand linux performance</title>
      <link>http://axcoto.com/notes/understand-linux-performance/</link>
      <pubDate>Sun, 03 Jul 2016 23:55:36 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/understand-linux-performance/</guid>
      <description>&lt;p&gt;Linux gives many tool to represent how well the system is perform. The
issue is the output of those tool is hard to understand. In this note,
let&amp;rsquo;s dive into some metric from default system.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>