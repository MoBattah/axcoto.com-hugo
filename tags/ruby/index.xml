<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on My New Hugo Site</title>
    <link>http://axcoto.com/tags/ruby/index.xml</link>
    <description>Recent content in Ruby on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://axcoto.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mongoid Pitfall</title>
      <link>http://axcoto.com/notes/mongoid-pitfalls/</link>
      <pubDate>Wed, 09 Nov 2016 21:18:32 -0800</pubDate>
      
      <guid>http://axcoto.com/notes/mongoid-pitfalls/</guid>
      <description>

&lt;h2 id=&#34;default-value-and-callback&#34;&gt;Default value and callback&lt;/h2&gt;

&lt;p&gt;I recently started to work with Rails and Mongoid. I don&amp;rsquo;t have much
experience with ActiveRecord and this is the first job that I actually
use Rails.&lt;/p&gt;

&lt;p&gt;The other day we have a query that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array.each do |user_id|
  User.find(user_id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The array contains 20 elements. And A find by id should be very fast but
above query run in ~10s.&lt;/p&gt;

&lt;p&gt;At first I tried to turn it into something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.where(:id.in =&amp;gt; array).each 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it is still superslow. Turning out &lt;strong&gt;MongoiD&lt;/strong&gt; will auto load all
relations and this user has lots of association so Mongoid will fetch
all kind of relations. This array contains a list of heavy users in our
app with lots of related data.&lt;/p&gt;

&lt;p&gt;The fix is simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.without(:relation).find(user_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lession is that we should always benchmark code instead of blindly
guessing which parts of code is slow. If I benchmark them right at the
beginning I would have known exactly the problem much quicker.&lt;/p&gt;

&lt;p&gt;The second thing is default value. Value is evaluated instantly at run
time, when the file is loaded if the value wasn&amp;rsquo;t a closure.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you have this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field :foo, type: Time, default: Time.now.utc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the value of everydocument will be exactly same value at the time
the file is loaded and evaluated by RubyVM.&lt;/p&gt;

&lt;p&gt;The right way to do this is using a callback so that the value is
evaluate lazily at runtime&lt;/p&gt;

&lt;h2 id=&#34;default-value-and-search&#34;&gt;Default value and search&lt;/h2&gt;

&lt;p&gt;The other day I see no data in an &lt;code&gt;admin ui&lt;/code&gt; which supposed to always
have data. I fired up Rails console, and run query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Check.where(type: &#39;http&#39;).count
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It returns 0:&lt;/p&gt;

&lt;p&gt;But I do see some document with that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Check.first.type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I open the mongo shell to check real data and the field was missing.
Turning out, the &lt;code&gt;default&lt;/code&gt; masked the problem, when data is missing,
default is kicked in and field it in.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>