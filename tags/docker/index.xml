<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on My New Hugo Site</title>
    <link>http://axcoto.com/tags/docker/index.xml</link>
    <description>Recent content in Docker on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://axcoto.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cannot assign requested address - bind(2) for &#34;::1&#34;</title>
      <link>http://axcoto.com/notes/puma-cannot-assign-request-address/</link>
      <pubDate>Fri, 01 Sep 2017 11:02:05 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/puma-cannot-assign-request-address/</guid>
      <description>&lt;p&gt;Today I encountered this error during running Puma in Dockerm, using
official 2.3 Ruby image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cannot assign requested address - bind(2) for &amp;quot;::1&amp;quot; port 3000 (Errno::EADDRNOTAVAIL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Google search found out that
&lt;a href=&#34;this issue&#34;&gt;https://github.com/puma/puma/issues/1062&lt;/a&gt; and a fixed in
&lt;a href=&#34;https://github.com/puma/puma/pull/1318&#34;&gt;https://github.com/puma/puma/pull/1318&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, the fixed wasn&amp;rsquo;t working for me. The core of issue is somehow
even the docker container doesn&amp;rsquo;t support ipv6 but we have an entry like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;::1 localhost ip6-localhost ip6-loopback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in host file. This #1318 supposed to fixed it. It seems the issue caugh
by webpack dev server as well besde Puma. At that point, I was
frustrated and just try to find a way to disable ipv6 in docker
container.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using docker compose you can add this line to disable ipv6,
hence remove the &lt;code&gt;::1&lt;/code&gt; entry from host file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>an easy way to developer with docker</title>
      <link>http://axcoto.com/notes/an-easy-way-to-developer-with-docker/</link>
      <pubDate>Sun, 21 May 2017 11:02:05 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/an-easy-way-to-developer-with-docker/</guid>
      <description>&lt;p&gt;When we want to experiment with some progamming language or particular
framework. It&amp;rsquo;s bit painful to install them into our own development
machine. Cuz we may not end up using the language and ended up bloat our
machine.&lt;/p&gt;

&lt;p&gt;Docker helps to reduce that pain. We can get a bash console&lt;/p&gt;

&lt;p&gt;Example, say we want to work with Elixir, simply run this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -it -v `pwd`:/app elixir /bin/bash -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a bash session in a container with Elixir and we can invoke
any Elixir command.&lt;/p&gt;

&lt;p&gt;Usually we want to run a web server. We can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -it -v `pwd`:/app -p 4000:4000 elixir /bin/bash -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run Phoeni and hit &lt;code&gt;127.0.0.1:4000&lt;/code&gt; as if we were working on
host machine.&lt;/p&gt;

&lt;p&gt;But getting run these command every time is boiler plate. Let&amp;rsquo;s
intergrate them into our shell. Put this in your shell rc file, or
anywhere it can be loaded automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker_repl() {
  docker run --rm -it -v `pwd`:/app $@ /bin/bash -l
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you simple run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker_repl -p 4000:4000 elixir
docker_repl -p 3000:3000 crystallang/crystal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila, you have full access to language runtime and your code in
&lt;code&gt;/app&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using btrfs with docker</title>
      <link>http://axcoto.com/notes/docker-btrfs/</link>
      <pubDate>Fri, 16 Dec 2016 19:54:58 -0800</pubDate>
      
      <guid>http://axcoto.com/notes/docker-btrfs/</guid>
      <description>&lt;p&gt;I recently have some issue with docker and btrfs which makes me want to
learn more about it. The reason I have used &lt;code&gt;btrfs&lt;/code&gt; is to solve some
issues with device mapper.&lt;/p&gt;

&lt;p&gt;I use docker with &lt;code&gt;btrfs&lt;/code&gt;. Recently, for some reasons the
&lt;code&gt;/var/lib/docker&lt;/code&gt; grow to 100% disk space and docker unable to start
with some error about opening db file or so.&lt;/p&gt;

&lt;p&gt;I tried to take a snapshot of EBS volume and resize it with &lt;code&gt;resize2fs&lt;/code&gt;
as I always do when resizing volume on EBS. But turning out that doesn&amp;rsquo;t
work due to &lt;code&gt;btrfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily I found an much nicer way to increase. Simply add a new volume,
then using this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo btrfs device add -f /dev/xvdc /var/lib/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds extra space to &lt;code&gt;/var/lib/docker&lt;/code&gt;. At least, this will make
docker start backup and I can backup my docker image or inspect/debug
some existing container.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>