<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Test on My New Hugo Site</title>
    <link>http://axcoto.com/tags/unit-test/index.xml</link>
    <description>Recent content in Unit Test on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://axcoto.com/tags/unit-test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go testing with Go check</title>
      <link>http://axcoto.com/notes/go-testing-with-gocheck/</link>
      <pubDate>Wed, 30 Aug 2017 11:02:05 -0700</pubDate>
      
      <guid>http://axcoto.com/notes/go-testing-with-gocheck/</guid>
      <description>&lt;p&gt;Using the built-in Go testing package is vey tedious and repeated.
Especially when doing DeepEqual it&amp;rsquo;s requires more code.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;gocheck&lt;/code&gt; package attempt to handle that. It&amp;rsquo;s use is very clean as
well.&lt;/p&gt;

&lt;p&gt;We wrap around Go built-in test like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package thing

import (
  . &amp;quot;gopkg.in/check.v1&amp;quot;
  &amp;quot;testing&amp;quot;
)

// Hook up gocheck into the &amp;quot;gopkg test&amp;quot; runner.
func TestTheThing(t *testing.T) { TestingT(t) }

// Now we use our own Suite, I tend to think of its like context in Ruby
type SubnetSuite struct{}

// Now we actually register the suite
var _ = Suite(&amp;amp;SubnetSuite{})

// Define out test
func (s *Suite) TestCase1(c *C) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The thing with &lt;code&gt;C&lt;/code&gt; is it expose a nice interface to assert such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c.Assert(Foo, Equal, &amp;quot;bar&amp;quot;)
c.Assert(Foo, IsNil)
c.Assert(Foo, DeepEqual, bar)
c.Assert(Foo, NotNull, bar)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how it&amp;rsquo;s very descriptive with the checker&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>